/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * PostgREST API
 * This is a dynamic API generated by PostgREST
 * OpenAPI spec version: 13.0.4
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type { DataTag, DefinedInitialDataOptions, DefinedUseQueryResult, MutationFunction, QueryClient, QueryFunction, QueryKey, UndefinedInitialDataOptions, UseMutationOptions, UseMutationResult, UseQueryOptions, UseQueryResult } from '@tanstack/react-query';
import { customAxios } from './custom-axios';
export interface Transactions {
    /** Note:
  This is a Primary Key.<pk/> */
    transaction_id: number;
    wallet_id: number;
    /** Note:
  This is a Foreign Key to `transaction_types.transaction_type_id`.<fk table='transaction_types' column='transaction_type_id'/> */
    transaction_type_id: number;
    amount: number;
    transaction_date?: string;
    description?: string;
}
export interface TransactionTypes {
    /** Note:
  This is a Primary Key.<pk/> */
    transaction_type_id: number;
    /** @maxLength 50 */
    name: string;
}
export interface Profiles {
    /** @maxLength 255 */
    photo_url?: string;
    /** Note:
  This is a Primary Key.<pk/> */
    user_id: string;
}
export interface Currencies {
    /** Note:
  This is a Primary Key.<pk/> */
    currency_id: number;
    /** @maxLength 10 */
    name: string;
}
export interface Wallets {
    /** Note:
  This is a Primary Key.<pk/> */
    wallet_id: number;
    balance: number;
    created_at?: string;
    updated_at?: string;
    /** Note:
  This is a Foreign Key to `currencies.currency_id`.<fk table='currencies' column='currency_id'/> */
    currency_id: number;
    user_id: string;
}
/**
 * transactions
 */
export type TransactionsBody = Transactions;
/**
 * transaction_types
 */
export type TransactionTypesBody = TransactionTypes;
/**
 * profiles
 */
export type ProfilesBody = Profiles;
/**
 * currencies
 */
export type CurrenciesBody = Currencies;
/**
 * wallets
 */
export type WalletsBody = Wallets;
export type PreferParamsParameter = typeof PreferParamsParameter[keyof typeof PreferParamsParameter];
// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PreferParamsParameter = {} as const;
export type PreferReturnParameter = typeof PreferReturnParameter[keyof typeof PreferReturnParameter];
// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PreferReturnParameter = {
    'return=representation': 'return=representation',
    'return=minimal': 'return=minimal',
    'return=none': 'return=none',
} as const;
export type PreferCountParameter = typeof PreferCountParameter[keyof typeof PreferCountParameter];
// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PreferCountParameter = {
    'count=none': 'count=none',
} as const;
export type PreferPostParameter = typeof PreferPostParameter[keyof typeof PreferPostParameter];
// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PreferPostParameter = {
    'return=representation': 'return=representation',
    'return=minimal': 'return=minimal',
    'return=none': 'return=none',
    'resolution=ignore-duplicates': 'resolution=ignore-duplicates',
    'resolution=merge-duplicates': 'resolution=merge-duplicates',
} as const;
/**
 * Filtering Columns
 */
export type SelectParameter = string;
/**
 * On Conflict
 */
export type OnConflictParameter = string;
/**
 * Ordering
 */
export type OrderParameter = string;
/**
 * Limiting and Pagination
 */
export type RangeParameter = string;
/**
 * Limiting and Pagination
 */
export type RangeUnitParameter = string;
/**
 * Limiting and Pagination
 */
export type OffsetParameter = string;
/**
 * Limiting and Pagination
 */
export type LimitParameter = string;
export type RowFilterTransactionsTransactionIdParameter = string;
export type RowFilterTransactionsWalletIdParameter = string;
export type RowFilterTransactionsTransactionTypeIdParameter = string;
export type RowFilterTransactionsAmountParameter = string;
export type RowFilterTransactionsTransactionDateParameter = string;
export type RowFilterTransactionsDescriptionParameter = string;
export type RowFilterTransactionTypesTransactionTypeIdParameter = string;
export type RowFilterTransactionTypesNameParameter = string;
export type RowFilterProfilesPhotoUrlParameter = string;
export type RowFilterProfilesUserIdParameter = string;
export type RowFilterCurrenciesCurrencyIdParameter = string;
export type RowFilterCurrenciesNameParameter = string;
export type RowFilterWalletsWalletIdParameter = string;
export type RowFilterWalletsBalanceParameter = string;
export type RowFilterWalletsCreatedAtParameter = string;
export type RowFilterWalletsUpdatedAtParameter = string;
export type RowFilterWalletsCurrencyIdParameter = string;
export type RowFilterWalletsUserIdParameter = string;
export type GetTransactionsParams = {
    transaction_id?: RowFilterTransactionsTransactionIdParameter;
    wallet_id?: RowFilterTransactionsWalletIdParameter;
    transaction_type_id?: RowFilterTransactionsTransactionTypeIdParameter;
    amount?: RowFilterTransactionsAmountParameter;
    transaction_date?: RowFilterTransactionsTransactionDateParameter;
    description?: RowFilterTransactionsDescriptionParameter;
    /**
     * Filtering Columns
     */
    select?: SelectParameter;
    /**
     * Ordering
     */
    order?: OrderParameter;
    /**
     * Limiting and Pagination
     */
    offset?: OffsetParameter;
    /**
     * Limiting and Pagination
     */
    limit?: LimitParameter;
};
export type PostTransactionsParams = {
    /**
     * Filtering Columns
     */
    select?: SelectParameter;
};
export type DeleteTransactionsParams = {
    transaction_id?: RowFilterTransactionsTransactionIdParameter;
    wallet_id?: RowFilterTransactionsWalletIdParameter;
    transaction_type_id?: RowFilterTransactionsTransactionTypeIdParameter;
    amount?: RowFilterTransactionsAmountParameter;
    transaction_date?: RowFilterTransactionsTransactionDateParameter;
    description?: RowFilterTransactionsDescriptionParameter;
};
export type PatchTransactionsParams = {
    transaction_id?: RowFilterTransactionsTransactionIdParameter;
    wallet_id?: RowFilterTransactionsWalletIdParameter;
    transaction_type_id?: RowFilterTransactionsTransactionTypeIdParameter;
    amount?: RowFilterTransactionsAmountParameter;
    transaction_date?: RowFilterTransactionsTransactionDateParameter;
    description?: RowFilterTransactionsDescriptionParameter;
};
export type GetTransactionTypesParams = {
    transaction_type_id?: RowFilterTransactionTypesTransactionTypeIdParameter;
    name?: RowFilterTransactionTypesNameParameter;
    /**
     * Filtering Columns
     */
    select?: SelectParameter;
    /**
     * Ordering
     */
    order?: OrderParameter;
    /**
     * Limiting and Pagination
     */
    offset?: OffsetParameter;
    /**
     * Limiting and Pagination
     */
    limit?: LimitParameter;
};
export type PostTransactionTypesParams = {
    /**
     * Filtering Columns
     */
    select?: SelectParameter;
};
export type DeleteTransactionTypesParams = {
    transaction_type_id?: RowFilterTransactionTypesTransactionTypeIdParameter;
    name?: RowFilterTransactionTypesNameParameter;
};
export type PatchTransactionTypesParams = {
    transaction_type_id?: RowFilterTransactionTypesTransactionTypeIdParameter;
    name?: RowFilterTransactionTypesNameParameter;
};
export type GetProfilesParams = {
    photo_url?: RowFilterProfilesPhotoUrlParameter;
    user_id?: RowFilterProfilesUserIdParameter;
    /**
     * Filtering Columns
     */
    select?: SelectParameter;
    /**
     * Ordering
     */
    order?: OrderParameter;
    /**
     * Limiting and Pagination
     */
    offset?: OffsetParameter;
    /**
     * Limiting and Pagination
     */
    limit?: LimitParameter;
};
export type PostProfilesParams = {
    /**
     * Filtering Columns
     */
    select?: SelectParameter;
};
export type DeleteProfilesParams = {
    photo_url?: RowFilterProfilesPhotoUrlParameter;
    user_id?: RowFilterProfilesUserIdParameter;
};
export type PatchProfilesParams = {
    photo_url?: RowFilterProfilesPhotoUrlParameter;
    user_id?: RowFilterProfilesUserIdParameter;
};
export type GetCurrenciesParams = {
    currency_id?: RowFilterCurrenciesCurrencyIdParameter;
    name?: RowFilterCurrenciesNameParameter;
    /**
     * Filtering Columns
     */
    select?: SelectParameter;
    /**
     * Ordering
     */
    order?: OrderParameter;
    /**
     * Limiting and Pagination
     */
    offset?: OffsetParameter;
    /**
     * Limiting and Pagination
     */
    limit?: LimitParameter;
};
export type PostCurrenciesParams = {
    /**
     * Filtering Columns
     */
    select?: SelectParameter;
};
export type DeleteCurrenciesParams = {
    currency_id?: RowFilterCurrenciesCurrencyIdParameter;
    name?: RowFilterCurrenciesNameParameter;
};
export type PatchCurrenciesParams = {
    currency_id?: RowFilterCurrenciesCurrencyIdParameter;
    name?: RowFilterCurrenciesNameParameter;
};
export type GetWalletsParams = {
    wallet_id?: RowFilterWalletsWalletIdParameter;
    balance?: RowFilterWalletsBalanceParameter;
    created_at?: RowFilterWalletsCreatedAtParameter;
    updated_at?: RowFilterWalletsUpdatedAtParameter;
    currency_id?: RowFilterWalletsCurrencyIdParameter;
    user_id?: RowFilterWalletsUserIdParameter;
    /**
     * Filtering Columns
     */
    select?: SelectParameter;
    /**
     * Ordering
     */
    order?: OrderParameter;
    /**
     * Limiting and Pagination
     */
    offset?: OffsetParameter;
    /**
     * Limiting and Pagination
     */
    limit?: LimitParameter;
};
export type PostWalletsParams = {
    /**
     * Filtering Columns
     */
    select?: SelectParameter;
};
export type DeleteWalletsParams = {
    wallet_id?: RowFilterWalletsWalletIdParameter;
    balance?: RowFilterWalletsBalanceParameter;
    created_at?: RowFilterWalletsCreatedAtParameter;
    updated_at?: RowFilterWalletsUpdatedAtParameter;
    currency_id?: RowFilterWalletsCurrencyIdParameter;
    user_id?: RowFilterWalletsUserIdParameter;
};
export type PatchWalletsParams = {
    wallet_id?: RowFilterWalletsWalletIdParameter;
    balance?: RowFilterWalletsBalanceParameter;
    created_at?: RowFilterWalletsCreatedAtParameter;
    updated_at?: RowFilterWalletsUpdatedAtParameter;
    currency_id?: RowFilterWalletsCurrencyIdParameter;
    user_id?: RowFilterWalletsUserIdParameter;
};
type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];
/**
 * @summary OpenAPI description (this document)
 */
export const get = (options?: SecondParameter<typeof customAxios>, signal?: AbortSignal) => {
    return customAxios<null>({ url: `/`, method: 'GET', signal
    }, options);
};
export const getGetQueryKey = () => {
    return [`/`] as const;
};
export const getGetQueryOptions = <TData = Awaited<ReturnType<typeof get>>, TError = unknown>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof get>>, TError, TData>>;
    request?: SecondParameter<typeof customAxios>;
}) => {
    const { query: queryOptions, request: requestOptions } = options ?? {};
    const queryKey = queryOptions?.queryKey ?? getGetQueryKey();
    const queryFn: QueryFunction<Awaited<ReturnType<typeof get>>> = ({ signal }) => get(requestOptions, signal);
    return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<Awaited<ReturnType<typeof get>>, TError, TData> & {
        queryKey: DataTag<QueryKey, TData, TError>;
    };
};
export type GetQueryResult = NonNullable<Awaited<ReturnType<typeof get>>>;
export type GetQueryError = unknown;
export function useGet<TData = Awaited<ReturnType<typeof get>>, TError = unknown>(options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof get>>, TError, TData>> & Pick<DefinedInitialDataOptions<Awaited<ReturnType<typeof get>>, TError, Awaited<ReturnType<typeof get>>>, 'initialData'>;
    request?: SecondParameter<typeof customAxios>;
}, queryClient?: QueryClient): DefinedUseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGet<TData = Awaited<ReturnType<typeof get>>, TError = unknown>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof get>>, TError, TData>> & Pick<UndefinedInitialDataOptions<Awaited<ReturnType<typeof get>>, TError, Awaited<ReturnType<typeof get>>>, 'initialData'>;
    request?: SecondParameter<typeof customAxios>;
}, queryClient?: QueryClient): UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGet<TData = Awaited<ReturnType<typeof get>>, TError = unknown>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof get>>, TError, TData>>;
    request?: SecondParameter<typeof customAxios>;
}, queryClient?: QueryClient): UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary OpenAPI description (this document)
 */
export function useGet<TData = Awaited<ReturnType<typeof get>>, TError = unknown>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof get>>, TError, TData>>;
    request?: SecondParameter<typeof customAxios>;
}, queryClient?: QueryClient): UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
} {
    const queryOptions = getGetQueryOptions(options);
    const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
        queryKey: DataTag<QueryKey, TData, TError>;
    };
    query.queryKey = queryOptions.queryKey;
    return query;
}
export const getTransactions = (params?: GetTransactionsParams, options?: SecondParameter<typeof customAxios>, signal?: AbortSignal) => {
    return customAxios<Transactions[] | null>({ url: `/transactions`, method: 'GET',
        params, signal
    }, options);
};
export const getGetTransactionsQueryKey = (params?: GetTransactionsParams) => {
    return [`/transactions`, ...(params ? [params] : [])] as const;
};
export const getGetTransactionsQueryOptions = <TData = Awaited<ReturnType<typeof getTransactions>>, TError = unknown>(params?: GetTransactionsParams, options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getTransactions>>, TError, TData>>;
    request?: SecondParameter<typeof customAxios>;
}) => {
    const { query: queryOptions, request: requestOptions } = options ?? {};
    const queryKey = queryOptions?.queryKey ?? getGetTransactionsQueryKey(params);
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTransactions>>> = ({ signal }) => getTransactions(params, requestOptions, signal);
    return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<Awaited<ReturnType<typeof getTransactions>>, TError, TData> & {
        queryKey: DataTag<QueryKey, TData, TError>;
    };
};
export type GetTransactionsQueryResult = NonNullable<Awaited<ReturnType<typeof getTransactions>>>;
export type GetTransactionsQueryError = unknown;
export function useGetTransactions<TData = Awaited<ReturnType<typeof getTransactions>>, TError = unknown>(params: undefined | GetTransactionsParams, options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getTransactions>>, TError, TData>> & Pick<DefinedInitialDataOptions<Awaited<ReturnType<typeof getTransactions>>, TError, Awaited<ReturnType<typeof getTransactions>>>, 'initialData'>;
    request?: SecondParameter<typeof customAxios>;
}, queryClient?: QueryClient): DefinedUseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetTransactions<TData = Awaited<ReturnType<typeof getTransactions>>, TError = unknown>(params?: GetTransactionsParams, options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getTransactions>>, TError, TData>> & Pick<UndefinedInitialDataOptions<Awaited<ReturnType<typeof getTransactions>>, TError, Awaited<ReturnType<typeof getTransactions>>>, 'initialData'>;
    request?: SecondParameter<typeof customAxios>;
}, queryClient?: QueryClient): UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetTransactions<TData = Awaited<ReturnType<typeof getTransactions>>, TError = unknown>(params?: GetTransactionsParams, options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getTransactions>>, TError, TData>>;
    request?: SecondParameter<typeof customAxios>;
}, queryClient?: QueryClient): UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetTransactions<TData = Awaited<ReturnType<typeof getTransactions>>, TError = unknown>(params?: GetTransactionsParams, options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getTransactions>>, TError, TData>>;
    request?: SecondParameter<typeof customAxios>;
}, queryClient?: QueryClient): UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
} {
    const queryOptions = getGetTransactionsQueryOptions(params, options);
    const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
        queryKey: DataTag<QueryKey, TData, TError>;
    };
    query.queryKey = queryOptions.queryKey;
    return query;
}
export const postTransactions = (transactionsBody: TransactionsBody, params?: PostTransactionsParams, options?: SecondParameter<typeof customAxios>, signal?: AbortSignal) => {
    return customAxios<null>({ url: `/transactions`, method: 'POST',
        headers: { 'Content-Type': 'application/json', },
        data: transactionsBody,
        params, signal
    }, options);
};
export const getPostTransactionsMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<typeof postTransactions>>, TError, {
        data: TransactionsBody;
        params?: PostTransactionsParams;
    }, TContext>;
    request?: SecondParameter<typeof customAxios>;
}): UseMutationOptions<Awaited<ReturnType<typeof postTransactions>>, TError, {
    data: TransactionsBody;
    params?: PostTransactionsParams;
}, TContext> => {
    const mutationKey = ['postTransactions'];
    const { mutation: mutationOptions, request: requestOptions } = options ?
        options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
            options
            : { ...options, mutation: { ...options.mutation, mutationKey } }
        : { mutation: { mutationKey, }, request: undefined };
    const mutationFn: MutationFunction<Awaited<ReturnType<typeof postTransactions>>, {
        data: TransactionsBody;
        params?: PostTransactionsParams;
    }> = (props) => {
        const { data, params } = props ?? {};
        return postTransactions(data, params, requestOptions);
    };
    return { mutationFn, ...mutationOptions };
};
export type PostTransactionsMutationResult = NonNullable<Awaited<ReturnType<typeof postTransactions>>>;
export type PostTransactionsMutationBody = TransactionsBody;
export type PostTransactionsMutationError = unknown;
export const usePostTransactions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<typeof postTransactions>>, TError, {
        data: TransactionsBody;
        params?: PostTransactionsParams;
    }, TContext>;
    request?: SecondParameter<typeof customAxios>;
}, queryClient?: QueryClient): UseMutationResult<Awaited<ReturnType<typeof postTransactions>>, TError, {
    data: TransactionsBody;
    params?: PostTransactionsParams;
}, TContext> => {
    const mutationOptions = getPostTransactionsMutationOptions(options);
    return useMutation(mutationOptions, queryClient);
};
export const deleteTransactions = (params?: DeleteTransactionsParams, options?: SecondParameter<typeof customAxios>) => {
    return customAxios<null>({ url: `/transactions`, method: 'DELETE',
        params
    }, options);
};
export const getDeleteTransactionsMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<typeof deleteTransactions>>, TError, {
        params?: DeleteTransactionsParams;
    }, TContext>;
    request?: SecondParameter<typeof customAxios>;
}): UseMutationOptions<Awaited<ReturnType<typeof deleteTransactions>>, TError, {
    params?: DeleteTransactionsParams;
}, TContext> => {
    const mutationKey = ['deleteTransactions'];
    const { mutation: mutationOptions, request: requestOptions } = options ?
        options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
            options
            : { ...options, mutation: { ...options.mutation, mutationKey } }
        : { mutation: { mutationKey, }, request: undefined };
    const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteTransactions>>, {
        params?: DeleteTransactionsParams;
    }> = (props) => {
        const { params } = props ?? {};
        return deleteTransactions(params, requestOptions);
    };
    return { mutationFn, ...mutationOptions };
};
export type DeleteTransactionsMutationResult = NonNullable<Awaited<ReturnType<typeof deleteTransactions>>>;
export type DeleteTransactionsMutationError = unknown;
export const useDeleteTransactions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<typeof deleteTransactions>>, TError, {
        params?: DeleteTransactionsParams;
    }, TContext>;
    request?: SecondParameter<typeof customAxios>;
}, queryClient?: QueryClient): UseMutationResult<Awaited<ReturnType<typeof deleteTransactions>>, TError, {
    params?: DeleteTransactionsParams;
}, TContext> => {
    const mutationOptions = getDeleteTransactionsMutationOptions(options);
    return useMutation(mutationOptions, queryClient);
};
export const patchTransactions = (transactionsBody: TransactionsBody, params?: PatchTransactionsParams, options?: SecondParameter<typeof customAxios>) => {
    return customAxios<null>({ url: `/transactions`, method: 'PATCH',
        headers: { 'Content-Type': 'application/json', },
        data: transactionsBody,
        params
    }, options);
};
export const getPatchTransactionsMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<typeof patchTransactions>>, TError, {
        data: TransactionsBody;
        params?: PatchTransactionsParams;
    }, TContext>;
    request?: SecondParameter<typeof customAxios>;
}): UseMutationOptions<Awaited<ReturnType<typeof patchTransactions>>, TError, {
    data: TransactionsBody;
    params?: PatchTransactionsParams;
}, TContext> => {
    const mutationKey = ['patchTransactions'];
    const { mutation: mutationOptions, request: requestOptions } = options ?
        options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
            options
            : { ...options, mutation: { ...options.mutation, mutationKey } }
        : { mutation: { mutationKey, }, request: undefined };
    const mutationFn: MutationFunction<Awaited<ReturnType<typeof patchTransactions>>, {
        data: TransactionsBody;
        params?: PatchTransactionsParams;
    }> = (props) => {
        const { data, params } = props ?? {};
        return patchTransactions(data, params, requestOptions);
    };
    return { mutationFn, ...mutationOptions };
};
export type PatchTransactionsMutationResult = NonNullable<Awaited<ReturnType<typeof patchTransactions>>>;
export type PatchTransactionsMutationBody = TransactionsBody;
export type PatchTransactionsMutationError = unknown;
export const usePatchTransactions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<typeof patchTransactions>>, TError, {
        data: TransactionsBody;
        params?: PatchTransactionsParams;
    }, TContext>;
    request?: SecondParameter<typeof customAxios>;
}, queryClient?: QueryClient): UseMutationResult<Awaited<ReturnType<typeof patchTransactions>>, TError, {
    data: TransactionsBody;
    params?: PatchTransactionsParams;
}, TContext> => {
    const mutationOptions = getPatchTransactionsMutationOptions(options);
    return useMutation(mutationOptions, queryClient);
};
export const getTransactionTypes = (params?: GetTransactionTypesParams, options?: SecondParameter<typeof customAxios>, signal?: AbortSignal) => {
    return customAxios<TransactionTypes[] | null>({ url: `/transaction_types`, method: 'GET',
        params, signal
    }, options);
};
export const getGetTransactionTypesQueryKey = (params?: GetTransactionTypesParams) => {
    return [`/transaction_types`, ...(params ? [params] : [])] as const;
};
export const getGetTransactionTypesQueryOptions = <TData = Awaited<ReturnType<typeof getTransactionTypes>>, TError = unknown>(params?: GetTransactionTypesParams, options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getTransactionTypes>>, TError, TData>>;
    request?: SecondParameter<typeof customAxios>;
}) => {
    const { query: queryOptions, request: requestOptions } = options ?? {};
    const queryKey = queryOptions?.queryKey ?? getGetTransactionTypesQueryKey(params);
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTransactionTypes>>> = ({ signal }) => getTransactionTypes(params, requestOptions, signal);
    return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<Awaited<ReturnType<typeof getTransactionTypes>>, TError, TData> & {
        queryKey: DataTag<QueryKey, TData, TError>;
    };
};
export type GetTransactionTypesQueryResult = NonNullable<Awaited<ReturnType<typeof getTransactionTypes>>>;
export type GetTransactionTypesQueryError = unknown;
export function useGetTransactionTypes<TData = Awaited<ReturnType<typeof getTransactionTypes>>, TError = unknown>(params: undefined | GetTransactionTypesParams, options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getTransactionTypes>>, TError, TData>> & Pick<DefinedInitialDataOptions<Awaited<ReturnType<typeof getTransactionTypes>>, TError, Awaited<ReturnType<typeof getTransactionTypes>>>, 'initialData'>;
    request?: SecondParameter<typeof customAxios>;
}, queryClient?: QueryClient): DefinedUseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetTransactionTypes<TData = Awaited<ReturnType<typeof getTransactionTypes>>, TError = unknown>(params?: GetTransactionTypesParams, options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getTransactionTypes>>, TError, TData>> & Pick<UndefinedInitialDataOptions<Awaited<ReturnType<typeof getTransactionTypes>>, TError, Awaited<ReturnType<typeof getTransactionTypes>>>, 'initialData'>;
    request?: SecondParameter<typeof customAxios>;
}, queryClient?: QueryClient): UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetTransactionTypes<TData = Awaited<ReturnType<typeof getTransactionTypes>>, TError = unknown>(params?: GetTransactionTypesParams, options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getTransactionTypes>>, TError, TData>>;
    request?: SecondParameter<typeof customAxios>;
}, queryClient?: QueryClient): UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetTransactionTypes<TData = Awaited<ReturnType<typeof getTransactionTypes>>, TError = unknown>(params?: GetTransactionTypesParams, options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getTransactionTypes>>, TError, TData>>;
    request?: SecondParameter<typeof customAxios>;
}, queryClient?: QueryClient): UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
} {
    const queryOptions = getGetTransactionTypesQueryOptions(params, options);
    const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
        queryKey: DataTag<QueryKey, TData, TError>;
    };
    query.queryKey = queryOptions.queryKey;
    return query;
}
export const postTransactionTypes = (transactionTypesBody: TransactionTypesBody, params?: PostTransactionTypesParams, options?: SecondParameter<typeof customAxios>, signal?: AbortSignal) => {
    return customAxios<null>({ url: `/transaction_types`, method: 'POST',
        headers: { 'Content-Type': 'application/json', },
        data: transactionTypesBody,
        params, signal
    }, options);
};
export const getPostTransactionTypesMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<typeof postTransactionTypes>>, TError, {
        data: TransactionTypesBody;
        params?: PostTransactionTypesParams;
    }, TContext>;
    request?: SecondParameter<typeof customAxios>;
}): UseMutationOptions<Awaited<ReturnType<typeof postTransactionTypes>>, TError, {
    data: TransactionTypesBody;
    params?: PostTransactionTypesParams;
}, TContext> => {
    const mutationKey = ['postTransactionTypes'];
    const { mutation: mutationOptions, request: requestOptions } = options ?
        options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
            options
            : { ...options, mutation: { ...options.mutation, mutationKey } }
        : { mutation: { mutationKey, }, request: undefined };
    const mutationFn: MutationFunction<Awaited<ReturnType<typeof postTransactionTypes>>, {
        data: TransactionTypesBody;
        params?: PostTransactionTypesParams;
    }> = (props) => {
        const { data, params } = props ?? {};
        return postTransactionTypes(data, params, requestOptions);
    };
    return { mutationFn, ...mutationOptions };
};
export type PostTransactionTypesMutationResult = NonNullable<Awaited<ReturnType<typeof postTransactionTypes>>>;
export type PostTransactionTypesMutationBody = TransactionTypesBody;
export type PostTransactionTypesMutationError = unknown;
export const usePostTransactionTypes = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<typeof postTransactionTypes>>, TError, {
        data: TransactionTypesBody;
        params?: PostTransactionTypesParams;
    }, TContext>;
    request?: SecondParameter<typeof customAxios>;
}, queryClient?: QueryClient): UseMutationResult<Awaited<ReturnType<typeof postTransactionTypes>>, TError, {
    data: TransactionTypesBody;
    params?: PostTransactionTypesParams;
}, TContext> => {
    const mutationOptions = getPostTransactionTypesMutationOptions(options);
    return useMutation(mutationOptions, queryClient);
};
export const deleteTransactionTypes = (params?: DeleteTransactionTypesParams, options?: SecondParameter<typeof customAxios>) => {
    return customAxios<null>({ url: `/transaction_types`, method: 'DELETE',
        params
    }, options);
};
export const getDeleteTransactionTypesMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<typeof deleteTransactionTypes>>, TError, {
        params?: DeleteTransactionTypesParams;
    }, TContext>;
    request?: SecondParameter<typeof customAxios>;
}): UseMutationOptions<Awaited<ReturnType<typeof deleteTransactionTypes>>, TError, {
    params?: DeleteTransactionTypesParams;
}, TContext> => {
    const mutationKey = ['deleteTransactionTypes'];
    const { mutation: mutationOptions, request: requestOptions } = options ?
        options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
            options
            : { ...options, mutation: { ...options.mutation, mutationKey } }
        : { mutation: { mutationKey, }, request: undefined };
    const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteTransactionTypes>>, {
        params?: DeleteTransactionTypesParams;
    }> = (props) => {
        const { params } = props ?? {};
        return deleteTransactionTypes(params, requestOptions);
    };
    return { mutationFn, ...mutationOptions };
};
export type DeleteTransactionTypesMutationResult = NonNullable<Awaited<ReturnType<typeof deleteTransactionTypes>>>;
export type DeleteTransactionTypesMutationError = unknown;
export const useDeleteTransactionTypes = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<typeof deleteTransactionTypes>>, TError, {
        params?: DeleteTransactionTypesParams;
    }, TContext>;
    request?: SecondParameter<typeof customAxios>;
}, queryClient?: QueryClient): UseMutationResult<Awaited<ReturnType<typeof deleteTransactionTypes>>, TError, {
    params?: DeleteTransactionTypesParams;
}, TContext> => {
    const mutationOptions = getDeleteTransactionTypesMutationOptions(options);
    return useMutation(mutationOptions, queryClient);
};
export const patchTransactionTypes = (transactionTypesBody: TransactionTypesBody, params?: PatchTransactionTypesParams, options?: SecondParameter<typeof customAxios>) => {
    return customAxios<null>({ url: `/transaction_types`, method: 'PATCH',
        headers: { 'Content-Type': 'application/json', },
        data: transactionTypesBody,
        params
    }, options);
};
export const getPatchTransactionTypesMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<typeof patchTransactionTypes>>, TError, {
        data: TransactionTypesBody;
        params?: PatchTransactionTypesParams;
    }, TContext>;
    request?: SecondParameter<typeof customAxios>;
}): UseMutationOptions<Awaited<ReturnType<typeof patchTransactionTypes>>, TError, {
    data: TransactionTypesBody;
    params?: PatchTransactionTypesParams;
}, TContext> => {
    const mutationKey = ['patchTransactionTypes'];
    const { mutation: mutationOptions, request: requestOptions } = options ?
        options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
            options
            : { ...options, mutation: { ...options.mutation, mutationKey } }
        : { mutation: { mutationKey, }, request: undefined };
    const mutationFn: MutationFunction<Awaited<ReturnType<typeof patchTransactionTypes>>, {
        data: TransactionTypesBody;
        params?: PatchTransactionTypesParams;
    }> = (props) => {
        const { data, params } = props ?? {};
        return patchTransactionTypes(data, params, requestOptions);
    };
    return { mutationFn, ...mutationOptions };
};
export type PatchTransactionTypesMutationResult = NonNullable<Awaited<ReturnType<typeof patchTransactionTypes>>>;
export type PatchTransactionTypesMutationBody = TransactionTypesBody;
export type PatchTransactionTypesMutationError = unknown;
export const usePatchTransactionTypes = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<typeof patchTransactionTypes>>, TError, {
        data: TransactionTypesBody;
        params?: PatchTransactionTypesParams;
    }, TContext>;
    request?: SecondParameter<typeof customAxios>;
}, queryClient?: QueryClient): UseMutationResult<Awaited<ReturnType<typeof patchTransactionTypes>>, TError, {
    data: TransactionTypesBody;
    params?: PatchTransactionTypesParams;
}, TContext> => {
    const mutationOptions = getPatchTransactionTypesMutationOptions(options);
    return useMutation(mutationOptions, queryClient);
};
export const getProfiles = (params?: GetProfilesParams, options?: SecondParameter<typeof customAxios>, signal?: AbortSignal) => {
    return customAxios<Profiles[] | null>({ url: `/profiles`, method: 'GET',
        params, signal
    }, options);
};
export const getGetProfilesQueryKey = (params?: GetProfilesParams) => {
    return [`/profiles`, ...(params ? [params] : [])] as const;
};
export const getGetProfilesQueryOptions = <TData = Awaited<ReturnType<typeof getProfiles>>, TError = unknown>(params?: GetProfilesParams, options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getProfiles>>, TError, TData>>;
    request?: SecondParameter<typeof customAxios>;
}) => {
    const { query: queryOptions, request: requestOptions } = options ?? {};
    const queryKey = queryOptions?.queryKey ?? getGetProfilesQueryKey(params);
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getProfiles>>> = ({ signal }) => getProfiles(params, requestOptions, signal);
    return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<Awaited<ReturnType<typeof getProfiles>>, TError, TData> & {
        queryKey: DataTag<QueryKey, TData, TError>;
    };
};
export type GetProfilesQueryResult = NonNullable<Awaited<ReturnType<typeof getProfiles>>>;
export type GetProfilesQueryError = unknown;
export function useGetProfiles<TData = Awaited<ReturnType<typeof getProfiles>>, TError = unknown>(params: undefined | GetProfilesParams, options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getProfiles>>, TError, TData>> & Pick<DefinedInitialDataOptions<Awaited<ReturnType<typeof getProfiles>>, TError, Awaited<ReturnType<typeof getProfiles>>>, 'initialData'>;
    request?: SecondParameter<typeof customAxios>;
}, queryClient?: QueryClient): DefinedUseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetProfiles<TData = Awaited<ReturnType<typeof getProfiles>>, TError = unknown>(params?: GetProfilesParams, options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getProfiles>>, TError, TData>> & Pick<UndefinedInitialDataOptions<Awaited<ReturnType<typeof getProfiles>>, TError, Awaited<ReturnType<typeof getProfiles>>>, 'initialData'>;
    request?: SecondParameter<typeof customAxios>;
}, queryClient?: QueryClient): UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetProfiles<TData = Awaited<ReturnType<typeof getProfiles>>, TError = unknown>(params?: GetProfilesParams, options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getProfiles>>, TError, TData>>;
    request?: SecondParameter<typeof customAxios>;
}, queryClient?: QueryClient): UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetProfiles<TData = Awaited<ReturnType<typeof getProfiles>>, TError = unknown>(params?: GetProfilesParams, options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getProfiles>>, TError, TData>>;
    request?: SecondParameter<typeof customAxios>;
}, queryClient?: QueryClient): UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
} {
    const queryOptions = getGetProfilesQueryOptions(params, options);
    const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
        queryKey: DataTag<QueryKey, TData, TError>;
    };
    query.queryKey = queryOptions.queryKey;
    return query;
}
export const postProfiles = (profilesBody: ProfilesBody, params?: PostProfilesParams, options?: SecondParameter<typeof customAxios>, signal?: AbortSignal) => {
    return customAxios<null>({ url: `/profiles`, method: 'POST',
        headers: { 'Content-Type': 'application/json', },
        data: profilesBody,
        params, signal
    }, options);
};
export const getPostProfilesMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<typeof postProfiles>>, TError, {
        data: ProfilesBody;
        params?: PostProfilesParams;
    }, TContext>;
    request?: SecondParameter<typeof customAxios>;
}): UseMutationOptions<Awaited<ReturnType<typeof postProfiles>>, TError, {
    data: ProfilesBody;
    params?: PostProfilesParams;
}, TContext> => {
    const mutationKey = ['postProfiles'];
    const { mutation: mutationOptions, request: requestOptions } = options ?
        options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
            options
            : { ...options, mutation: { ...options.mutation, mutationKey } }
        : { mutation: { mutationKey, }, request: undefined };
    const mutationFn: MutationFunction<Awaited<ReturnType<typeof postProfiles>>, {
        data: ProfilesBody;
        params?: PostProfilesParams;
    }> = (props) => {
        const { data, params } = props ?? {};
        return postProfiles(data, params, requestOptions);
    };
    return { mutationFn, ...mutationOptions };
};
export type PostProfilesMutationResult = NonNullable<Awaited<ReturnType<typeof postProfiles>>>;
export type PostProfilesMutationBody = ProfilesBody;
export type PostProfilesMutationError = unknown;
export const usePostProfiles = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<typeof postProfiles>>, TError, {
        data: ProfilesBody;
        params?: PostProfilesParams;
    }, TContext>;
    request?: SecondParameter<typeof customAxios>;
}, queryClient?: QueryClient): UseMutationResult<Awaited<ReturnType<typeof postProfiles>>, TError, {
    data: ProfilesBody;
    params?: PostProfilesParams;
}, TContext> => {
    const mutationOptions = getPostProfilesMutationOptions(options);
    return useMutation(mutationOptions, queryClient);
};
export const deleteProfiles = (params?: DeleteProfilesParams, options?: SecondParameter<typeof customAxios>) => {
    return customAxios<null>({ url: `/profiles`, method: 'DELETE',
        params
    }, options);
};
export const getDeleteProfilesMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<typeof deleteProfiles>>, TError, {
        params?: DeleteProfilesParams;
    }, TContext>;
    request?: SecondParameter<typeof customAxios>;
}): UseMutationOptions<Awaited<ReturnType<typeof deleteProfiles>>, TError, {
    params?: DeleteProfilesParams;
}, TContext> => {
    const mutationKey = ['deleteProfiles'];
    const { mutation: mutationOptions, request: requestOptions } = options ?
        options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
            options
            : { ...options, mutation: { ...options.mutation, mutationKey } }
        : { mutation: { mutationKey, }, request: undefined };
    const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteProfiles>>, {
        params?: DeleteProfilesParams;
    }> = (props) => {
        const { params } = props ?? {};
        return deleteProfiles(params, requestOptions);
    };
    return { mutationFn, ...mutationOptions };
};
export type DeleteProfilesMutationResult = NonNullable<Awaited<ReturnType<typeof deleteProfiles>>>;
export type DeleteProfilesMutationError = unknown;
export const useDeleteProfiles = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<typeof deleteProfiles>>, TError, {
        params?: DeleteProfilesParams;
    }, TContext>;
    request?: SecondParameter<typeof customAxios>;
}, queryClient?: QueryClient): UseMutationResult<Awaited<ReturnType<typeof deleteProfiles>>, TError, {
    params?: DeleteProfilesParams;
}, TContext> => {
    const mutationOptions = getDeleteProfilesMutationOptions(options);
    return useMutation(mutationOptions, queryClient);
};
export const patchProfiles = (profilesBody: ProfilesBody, params?: PatchProfilesParams, options?: SecondParameter<typeof customAxios>) => {
    return customAxios<null>({ url: `/profiles`, method: 'PATCH',
        headers: { 'Content-Type': 'application/json', },
        data: profilesBody,
        params
    }, options);
};
export const getPatchProfilesMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<typeof patchProfiles>>, TError, {
        data: ProfilesBody;
        params?: PatchProfilesParams;
    }, TContext>;
    request?: SecondParameter<typeof customAxios>;
}): UseMutationOptions<Awaited<ReturnType<typeof patchProfiles>>, TError, {
    data: ProfilesBody;
    params?: PatchProfilesParams;
}, TContext> => {
    const mutationKey = ['patchProfiles'];
    const { mutation: mutationOptions, request: requestOptions } = options ?
        options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
            options
            : { ...options, mutation: { ...options.mutation, mutationKey } }
        : { mutation: { mutationKey, }, request: undefined };
    const mutationFn: MutationFunction<Awaited<ReturnType<typeof patchProfiles>>, {
        data: ProfilesBody;
        params?: PatchProfilesParams;
    }> = (props) => {
        const { data, params } = props ?? {};
        return patchProfiles(data, params, requestOptions);
    };
    return { mutationFn, ...mutationOptions };
};
export type PatchProfilesMutationResult = NonNullable<Awaited<ReturnType<typeof patchProfiles>>>;
export type PatchProfilesMutationBody = ProfilesBody;
export type PatchProfilesMutationError = unknown;
export const usePatchProfiles = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<typeof patchProfiles>>, TError, {
        data: ProfilesBody;
        params?: PatchProfilesParams;
    }, TContext>;
    request?: SecondParameter<typeof customAxios>;
}, queryClient?: QueryClient): UseMutationResult<Awaited<ReturnType<typeof patchProfiles>>, TError, {
    data: ProfilesBody;
    params?: PatchProfilesParams;
}, TContext> => {
    const mutationOptions = getPatchProfilesMutationOptions(options);
    return useMutation(mutationOptions, queryClient);
};
export const getCurrencies = (params?: GetCurrenciesParams, options?: SecondParameter<typeof customAxios>, signal?: AbortSignal) => {
    return customAxios<Currencies[] | null>({ url: `/currencies`, method: 'GET',
        params, signal
    }, options);
};
export const getGetCurrenciesQueryKey = (params?: GetCurrenciesParams) => {
    return [`/currencies`, ...(params ? [params] : [])] as const;
};
export const getGetCurrenciesQueryOptions = <TData = Awaited<ReturnType<typeof getCurrencies>>, TError = unknown>(params?: GetCurrenciesParams, options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getCurrencies>>, TError, TData>>;
    request?: SecondParameter<typeof customAxios>;
}) => {
    const { query: queryOptions, request: requestOptions } = options ?? {};
    const queryKey = queryOptions?.queryKey ?? getGetCurrenciesQueryKey(params);
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getCurrencies>>> = ({ signal }) => getCurrencies(params, requestOptions, signal);
    return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<Awaited<ReturnType<typeof getCurrencies>>, TError, TData> & {
        queryKey: DataTag<QueryKey, TData, TError>;
    };
};
export type GetCurrenciesQueryResult = NonNullable<Awaited<ReturnType<typeof getCurrencies>>>;
export type GetCurrenciesQueryError = unknown;
export function useGetCurrencies<TData = Awaited<ReturnType<typeof getCurrencies>>, TError = unknown>(params: undefined | GetCurrenciesParams, options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getCurrencies>>, TError, TData>> & Pick<DefinedInitialDataOptions<Awaited<ReturnType<typeof getCurrencies>>, TError, Awaited<ReturnType<typeof getCurrencies>>>, 'initialData'>;
    request?: SecondParameter<typeof customAxios>;
}, queryClient?: QueryClient): DefinedUseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetCurrencies<TData = Awaited<ReturnType<typeof getCurrencies>>, TError = unknown>(params?: GetCurrenciesParams, options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getCurrencies>>, TError, TData>> & Pick<UndefinedInitialDataOptions<Awaited<ReturnType<typeof getCurrencies>>, TError, Awaited<ReturnType<typeof getCurrencies>>>, 'initialData'>;
    request?: SecondParameter<typeof customAxios>;
}, queryClient?: QueryClient): UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetCurrencies<TData = Awaited<ReturnType<typeof getCurrencies>>, TError = unknown>(params?: GetCurrenciesParams, options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getCurrencies>>, TError, TData>>;
    request?: SecondParameter<typeof customAxios>;
}, queryClient?: QueryClient): UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetCurrencies<TData = Awaited<ReturnType<typeof getCurrencies>>, TError = unknown>(params?: GetCurrenciesParams, options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getCurrencies>>, TError, TData>>;
    request?: SecondParameter<typeof customAxios>;
}, queryClient?: QueryClient): UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
} {
    const queryOptions = getGetCurrenciesQueryOptions(params, options);
    const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
        queryKey: DataTag<QueryKey, TData, TError>;
    };
    query.queryKey = queryOptions.queryKey;
    return query;
}
export const postCurrencies = (currenciesBody: CurrenciesBody, params?: PostCurrenciesParams, options?: SecondParameter<typeof customAxios>, signal?: AbortSignal) => {
    return customAxios<null>({ url: `/currencies`, method: 'POST',
        headers: { 'Content-Type': 'application/json', },
        data: currenciesBody,
        params, signal
    }, options);
};
export const getPostCurrenciesMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<typeof postCurrencies>>, TError, {
        data: CurrenciesBody;
        params?: PostCurrenciesParams;
    }, TContext>;
    request?: SecondParameter<typeof customAxios>;
}): UseMutationOptions<Awaited<ReturnType<typeof postCurrencies>>, TError, {
    data: CurrenciesBody;
    params?: PostCurrenciesParams;
}, TContext> => {
    const mutationKey = ['postCurrencies'];
    const { mutation: mutationOptions, request: requestOptions } = options ?
        options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
            options
            : { ...options, mutation: { ...options.mutation, mutationKey } }
        : { mutation: { mutationKey, }, request: undefined };
    const mutationFn: MutationFunction<Awaited<ReturnType<typeof postCurrencies>>, {
        data: CurrenciesBody;
        params?: PostCurrenciesParams;
    }> = (props) => {
        const { data, params } = props ?? {};
        return postCurrencies(data, params, requestOptions);
    };
    return { mutationFn, ...mutationOptions };
};
export type PostCurrenciesMutationResult = NonNullable<Awaited<ReturnType<typeof postCurrencies>>>;
export type PostCurrenciesMutationBody = CurrenciesBody;
export type PostCurrenciesMutationError = unknown;
export const usePostCurrencies = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<typeof postCurrencies>>, TError, {
        data: CurrenciesBody;
        params?: PostCurrenciesParams;
    }, TContext>;
    request?: SecondParameter<typeof customAxios>;
}, queryClient?: QueryClient): UseMutationResult<Awaited<ReturnType<typeof postCurrencies>>, TError, {
    data: CurrenciesBody;
    params?: PostCurrenciesParams;
}, TContext> => {
    const mutationOptions = getPostCurrenciesMutationOptions(options);
    return useMutation(mutationOptions, queryClient);
};
export const deleteCurrencies = (params?: DeleteCurrenciesParams, options?: SecondParameter<typeof customAxios>) => {
    return customAxios<null>({ url: `/currencies`, method: 'DELETE',
        params
    }, options);
};
export const getDeleteCurrenciesMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<typeof deleteCurrencies>>, TError, {
        params?: DeleteCurrenciesParams;
    }, TContext>;
    request?: SecondParameter<typeof customAxios>;
}): UseMutationOptions<Awaited<ReturnType<typeof deleteCurrencies>>, TError, {
    params?: DeleteCurrenciesParams;
}, TContext> => {
    const mutationKey = ['deleteCurrencies'];
    const { mutation: mutationOptions, request: requestOptions } = options ?
        options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
            options
            : { ...options, mutation: { ...options.mutation, mutationKey } }
        : { mutation: { mutationKey, }, request: undefined };
    const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteCurrencies>>, {
        params?: DeleteCurrenciesParams;
    }> = (props) => {
        const { params } = props ?? {};
        return deleteCurrencies(params, requestOptions);
    };
    return { mutationFn, ...mutationOptions };
};
export type DeleteCurrenciesMutationResult = NonNullable<Awaited<ReturnType<typeof deleteCurrencies>>>;
export type DeleteCurrenciesMutationError = unknown;
export const useDeleteCurrencies = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<typeof deleteCurrencies>>, TError, {
        params?: DeleteCurrenciesParams;
    }, TContext>;
    request?: SecondParameter<typeof customAxios>;
}, queryClient?: QueryClient): UseMutationResult<Awaited<ReturnType<typeof deleteCurrencies>>, TError, {
    params?: DeleteCurrenciesParams;
}, TContext> => {
    const mutationOptions = getDeleteCurrenciesMutationOptions(options);
    return useMutation(mutationOptions, queryClient);
};
export const patchCurrencies = (currenciesBody: CurrenciesBody, params?: PatchCurrenciesParams, options?: SecondParameter<typeof customAxios>) => {
    return customAxios<null>({ url: `/currencies`, method: 'PATCH',
        headers: { 'Content-Type': 'application/json', },
        data: currenciesBody,
        params
    }, options);
};
export const getPatchCurrenciesMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<typeof patchCurrencies>>, TError, {
        data: CurrenciesBody;
        params?: PatchCurrenciesParams;
    }, TContext>;
    request?: SecondParameter<typeof customAxios>;
}): UseMutationOptions<Awaited<ReturnType<typeof patchCurrencies>>, TError, {
    data: CurrenciesBody;
    params?: PatchCurrenciesParams;
}, TContext> => {
    const mutationKey = ['patchCurrencies'];
    const { mutation: mutationOptions, request: requestOptions } = options ?
        options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
            options
            : { ...options, mutation: { ...options.mutation, mutationKey } }
        : { mutation: { mutationKey, }, request: undefined };
    const mutationFn: MutationFunction<Awaited<ReturnType<typeof patchCurrencies>>, {
        data: CurrenciesBody;
        params?: PatchCurrenciesParams;
    }> = (props) => {
        const { data, params } = props ?? {};
        return patchCurrencies(data, params, requestOptions);
    };
    return { mutationFn, ...mutationOptions };
};
export type PatchCurrenciesMutationResult = NonNullable<Awaited<ReturnType<typeof patchCurrencies>>>;
export type PatchCurrenciesMutationBody = CurrenciesBody;
export type PatchCurrenciesMutationError = unknown;
export const usePatchCurrencies = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<typeof patchCurrencies>>, TError, {
        data: CurrenciesBody;
        params?: PatchCurrenciesParams;
    }, TContext>;
    request?: SecondParameter<typeof customAxios>;
}, queryClient?: QueryClient): UseMutationResult<Awaited<ReturnType<typeof patchCurrencies>>, TError, {
    data: CurrenciesBody;
    params?: PatchCurrenciesParams;
}, TContext> => {
    const mutationOptions = getPatchCurrenciesMutationOptions(options);
    return useMutation(mutationOptions, queryClient);
};
export const getWallets = (params?: GetWalletsParams, options?: SecondParameter<typeof customAxios>, signal?: AbortSignal) => {
    return customAxios<Wallets[] | null>({ url: `/wallets`, method: 'GET',
        params, signal
    }, options);
};
export const getGetWalletsQueryKey = (params?: GetWalletsParams) => {
    return [`/wallets`, ...(params ? [params] : [])] as const;
};
export const getGetWalletsQueryOptions = <TData = Awaited<ReturnType<typeof getWallets>>, TError = unknown>(params?: GetWalletsParams, options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getWallets>>, TError, TData>>;
    request?: SecondParameter<typeof customAxios>;
}) => {
    const { query: queryOptions, request: requestOptions } = options ?? {};
    const queryKey = queryOptions?.queryKey ?? getGetWalletsQueryKey(params);
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getWallets>>> = ({ signal }) => getWallets(params, requestOptions, signal);
    return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<Awaited<ReturnType<typeof getWallets>>, TError, TData> & {
        queryKey: DataTag<QueryKey, TData, TError>;
    };
};
export type GetWalletsQueryResult = NonNullable<Awaited<ReturnType<typeof getWallets>>>;
export type GetWalletsQueryError = unknown;
export function useGetWallets<TData = Awaited<ReturnType<typeof getWallets>>, TError = unknown>(params: undefined | GetWalletsParams, options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getWallets>>, TError, TData>> & Pick<DefinedInitialDataOptions<Awaited<ReturnType<typeof getWallets>>, TError, Awaited<ReturnType<typeof getWallets>>>, 'initialData'>;
    request?: SecondParameter<typeof customAxios>;
}, queryClient?: QueryClient): DefinedUseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetWallets<TData = Awaited<ReturnType<typeof getWallets>>, TError = unknown>(params?: GetWalletsParams, options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getWallets>>, TError, TData>> & Pick<UndefinedInitialDataOptions<Awaited<ReturnType<typeof getWallets>>, TError, Awaited<ReturnType<typeof getWallets>>>, 'initialData'>;
    request?: SecondParameter<typeof customAxios>;
}, queryClient?: QueryClient): UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetWallets<TData = Awaited<ReturnType<typeof getWallets>>, TError = unknown>(params?: GetWalletsParams, options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getWallets>>, TError, TData>>;
    request?: SecondParameter<typeof customAxios>;
}, queryClient?: QueryClient): UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetWallets<TData = Awaited<ReturnType<typeof getWallets>>, TError = unknown>(params?: GetWalletsParams, options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getWallets>>, TError, TData>>;
    request?: SecondParameter<typeof customAxios>;
}, queryClient?: QueryClient): UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
} {
    const queryOptions = getGetWalletsQueryOptions(params, options);
    const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
        queryKey: DataTag<QueryKey, TData, TError>;
    };
    query.queryKey = queryOptions.queryKey;
    return query;
}
export const postWallets = (walletsBody: WalletsBody, params?: PostWalletsParams, options?: SecondParameter<typeof customAxios>, signal?: AbortSignal) => {
    return customAxios<null>({ url: `/wallets`, method: 'POST',
        headers: { 'Content-Type': 'application/json', },
        data: walletsBody,
        params, signal
    }, options);
};
export const getPostWalletsMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<typeof postWallets>>, TError, {
        data: WalletsBody;
        params?: PostWalletsParams;
    }, TContext>;
    request?: SecondParameter<typeof customAxios>;
}): UseMutationOptions<Awaited<ReturnType<typeof postWallets>>, TError, {
    data: WalletsBody;
    params?: PostWalletsParams;
}, TContext> => {
    const mutationKey = ['postWallets'];
    const { mutation: mutationOptions, request: requestOptions } = options ?
        options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
            options
            : { ...options, mutation: { ...options.mutation, mutationKey } }
        : { mutation: { mutationKey, }, request: undefined };
    const mutationFn: MutationFunction<Awaited<ReturnType<typeof postWallets>>, {
        data: WalletsBody;
        params?: PostWalletsParams;
    }> = (props) => {
        const { data, params } = props ?? {};
        return postWallets(data, params, requestOptions);
    };
    return { mutationFn, ...mutationOptions };
};
export type PostWalletsMutationResult = NonNullable<Awaited<ReturnType<typeof postWallets>>>;
export type PostWalletsMutationBody = WalletsBody;
export type PostWalletsMutationError = unknown;
export const usePostWallets = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<typeof postWallets>>, TError, {
        data: WalletsBody;
        params?: PostWalletsParams;
    }, TContext>;
    request?: SecondParameter<typeof customAxios>;
}, queryClient?: QueryClient): UseMutationResult<Awaited<ReturnType<typeof postWallets>>, TError, {
    data: WalletsBody;
    params?: PostWalletsParams;
}, TContext> => {
    const mutationOptions = getPostWalletsMutationOptions(options);
    return useMutation(mutationOptions, queryClient);
};
export const deleteWallets = (params?: DeleteWalletsParams, options?: SecondParameter<typeof customAxios>) => {
    return customAxios<null>({ url: `/wallets`, method: 'DELETE',
        params
    }, options);
};
export const getDeleteWalletsMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<typeof deleteWallets>>, TError, {
        params?: DeleteWalletsParams;
    }, TContext>;
    request?: SecondParameter<typeof customAxios>;
}): UseMutationOptions<Awaited<ReturnType<typeof deleteWallets>>, TError, {
    params?: DeleteWalletsParams;
}, TContext> => {
    const mutationKey = ['deleteWallets'];
    const { mutation: mutationOptions, request: requestOptions } = options ?
        options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
            options
            : { ...options, mutation: { ...options.mutation, mutationKey } }
        : { mutation: { mutationKey, }, request: undefined };
    const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteWallets>>, {
        params?: DeleteWalletsParams;
    }> = (props) => {
        const { params } = props ?? {};
        return deleteWallets(params, requestOptions);
    };
    return { mutationFn, ...mutationOptions };
};
export type DeleteWalletsMutationResult = NonNullable<Awaited<ReturnType<typeof deleteWallets>>>;
export type DeleteWalletsMutationError = unknown;
export const useDeleteWallets = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<typeof deleteWallets>>, TError, {
        params?: DeleteWalletsParams;
    }, TContext>;
    request?: SecondParameter<typeof customAxios>;
}, queryClient?: QueryClient): UseMutationResult<Awaited<ReturnType<typeof deleteWallets>>, TError, {
    params?: DeleteWalletsParams;
}, TContext> => {
    const mutationOptions = getDeleteWalletsMutationOptions(options);
    return useMutation(mutationOptions, queryClient);
};
export const patchWallets = (walletsBody: WalletsBody, params?: PatchWalletsParams, options?: SecondParameter<typeof customAxios>) => {
    return customAxios<null>({ url: `/wallets`, method: 'PATCH',
        headers: { 'Content-Type': 'application/json', },
        data: walletsBody,
        params
    }, options);
};
export const getPatchWalletsMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<typeof patchWallets>>, TError, {
        data: WalletsBody;
        params?: PatchWalletsParams;
    }, TContext>;
    request?: SecondParameter<typeof customAxios>;
}): UseMutationOptions<Awaited<ReturnType<typeof patchWallets>>, TError, {
    data: WalletsBody;
    params?: PatchWalletsParams;
}, TContext> => {
    const mutationKey = ['patchWallets'];
    const { mutation: mutationOptions, request: requestOptions } = options ?
        options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
            options
            : { ...options, mutation: { ...options.mutation, mutationKey } }
        : { mutation: { mutationKey, }, request: undefined };
    const mutationFn: MutationFunction<Awaited<ReturnType<typeof patchWallets>>, {
        data: WalletsBody;
        params?: PatchWalletsParams;
    }> = (props) => {
        const { data, params } = props ?? {};
        return patchWallets(data, params, requestOptions);
    };
    return { mutationFn, ...mutationOptions };
};
export type PatchWalletsMutationResult = NonNullable<Awaited<ReturnType<typeof patchWallets>>>;
export type PatchWalletsMutationBody = WalletsBody;
export type PatchWalletsMutationError = unknown;
export const usePatchWallets = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<typeof patchWallets>>, TError, {
        data: WalletsBody;
        params?: PatchWalletsParams;
    }, TContext>;
    request?: SecondParameter<typeof customAxios>;
}, queryClient?: QueryClient): UseMutationResult<Awaited<ReturnType<typeof patchWallets>>, TError, {
    data: WalletsBody;
    params?: PatchWalletsParams;
}, TContext> => {
    const mutationOptions = getPatchWalletsMutationOptions(options);
    return useMutation(mutationOptions, queryClient);
};